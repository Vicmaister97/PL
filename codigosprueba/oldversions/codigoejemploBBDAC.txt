main(){
  initVar
  int ve;
  double vf v3, v5
  char vc vc2, vc3;
  boolean vl ;
  list_of int pe pe2, pe3 
  list_of double pf, pf2 ;
  list_of char pc, pc2 ;
  list_of boolean pl ;
  endVar

  int funcionA (int a1 double a2, char a3 ins){
    initVar
    int x1, x2 ;
    endVar

    char funcionB (char b1, boolean b2){
      initVar
      double xf, x2 ;
      endVar
      double funcionC (boolean c1, int c2){
        initVar
        double x1 ;
        endVar
        x1 = 1.3 ;
        if(c2>10) then {
          c2= c2-1;
        }
        else{
          x1= 3.1 ;
        }
        return x1 ;
      }
      xf= functionC (true, 10);
      x2= xf*(funcionC(false,1)-funcionC(true,23))/10.0;
      while (x2*funcionC(false,1)-xf<10.0)
      x2= x2*xf ;
    }
    double funcionD (double d1){
      initVar
      char dato ;
      int valor ;
      endVar

      char funcionE (char e1, char e2){
        in "introduzca dos caracteres: " e1, e2 ;
        if (e1=="a" and e2=="c") then
          return e1 ;
        else if (e1=="b") then
          return e2 ;
        else
          return " ";
        }
      in "introduzca un valor entero: " valor ;
      if (d1>0.0) then{
        initVar
        int dato ;
        endVar
        dato= 2 ;
        dato= valor*20/dato ;
      }
      else {
        valor= valor * 100 ;
        d1= d1/1000.0 ;
      }
      return d1 ;
    }
    pe = pe ++ 10 @ @ #pe;
    pf = pf ++ 10.0 @ @ #pf;
    pc = pc ++ "#" @ @ #pc;
    if (?pe == 20) then {
      pe = pe ++ 10 @ @ #pe;
    }
    else{
      pe = pe ** pe2 ;
      pe = pe2 - #pe;
      pe = pe2 - #(pe ++ (10 * (20/2000)) @ @ #pe) ;
    }
  }

}
